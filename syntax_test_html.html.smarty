| SYNTAX TEST "Packages/Smarty/Syntaxes/HTML (Smarty).sublime-syntax"

<h1>{$title|escape}</h1>
<ul>
    {foreach $cities as $city}
        <li>{$city.name|escape} ({$city.population})</li>
    {foreachelse}
        <li>no cities found</li>
    {/foreach}
</ul>

{* https://smarty-php.github.io/smarty/stable/designers/language-basic-syntax/language-syntax-comments/ *}
{* this is a comment *}
| <- text.html.smarty comment.block.smarty punctuation.definition.comment.begin.smarty
|^ punctuation.definition.comment.begin.smarty
|                    ^^ punctuation.definition.comment.end.smarty
|^^^^ comment.block.smarty
|                      ^ - comment

{* this multiline smarty
    comment is
    not sent to browser
| ^^^^ comment
*}

{*
    <select name="company">
      {html_options options=$vals selected=$selected_id}
    </select>
|   ^^^^ comment
*}

{* {include file=$includeFile} *}
|   ^^^^ comment


{* https://smarty-php.github.io/smarty/stable/designers/language-basic-syntax/language-syntax-variables/ *}
{$foo}        <-- displaying a simple variable (non array/object)
{$foo[4]}     <-- display the 5th element of a zero-indexed array
|^^^^^^^^ meta.tag.smarty
|        ^ - meta.tag.smarty
| <- punctuation.section.embedded.begin.smarty
|^^^^ variable.other.smarty
|^ punctuation.definition.variable.smarty
|       ^ punctuation.section.embedded.end.smarty
|    ^^^ meta.brackets.smarty
|       ^ - meta.brackets.smarty
|    ^ punctuation.section.brackets.begin.smarty
|      ^ punctuation.section.brackets.end.smarty
|     ^ constant.numeric
{$foo.bar}    <-- display the "bar" key value of an array, similar to PHP $foo['bar']
|    ^ punctuation.accessor.smarty
|     ^^^ meta.property.object.smarty
{$foo.$bar}   <-- display variable key value of an array, similar to PHP $foo[$bar]
|    ^ punctuation.accessor.smarty
|     ^^^ variable.other.smarty
{$foo->bar}   <-- display the object property "bar"
|    ^^ punctuation.accessor.arrow.smarty
|      ^^^ meta.property.object.smarty
{$foo->bar()} <-- display the return value of object method "bar"
|    ^^ punctuation.accessor.arrow.smarty
|      ^^^ variable.function.smarty
{#foo#}       <-- display the config file variable "foo"
|^^^^^^ meta.tag.smarty
{$smarty.config.foo} <-- synonym for {#foo#}
{$foo[bar]}   <-- syntax only valid in a section loop, see {section}
{assign var=foo value='baa'}{$foo} <--  displays "baa", see {assign}

Many other combinations are allowed

{$foo.bar.baz}
{$foo.$bar.$baz}
{$foo[4].baz}
{$foo[4].$baz}
{$foo.bar.baz[4]}
{$foo->bar($baz,2,$bar)} <-- passing parameters
|         ^^^^^^^^^^^^^ meta.group
|          ^^^^ variable.other
|              ^ punctuation
|               ^ constant.numeric
|                ^ punctuation
|                 ^^^^ variable.other
{"foo"}       <-- static values are allowed

Math and embedding tags:

{$x+$y}                             // will output the sum of x and y.
{assign var=foo value=$x+$y}        // in attributes
{$foo[$x+3]}                        // as array index
|     ^^ variable.other
|       ^ keyword.operator
|        ^ constant.numeric
{$foo={counter}+3}                  // tags within tags
|     ^^^^^^^^^ meta.tag.smarty
|              ^ keyword.operator
|               ^ constant.numeric
{$foo="this is message {counter}"}  // tags within double quoted strings
|                      ^^^^^^^^^

{* https://smarty-php.github.io/smarty/stable/designers/language-variables/language-config-variables/#examples *}
{config_load file='foo.conf'}
<html>
    <title>{#pageTitle#}</title>
|          ^^^^^^^^^^^^^ meta.tag.smarty
|                       ^ - meta.tag.smarty
|          ^^ punctuation.definition.begin.smarty
|            ^^^^^^^^^ variable.other.smarty
|                     ^^ punctuation.definition.end.smarty
    <body bgcolor="{#bodyBgColor#}">
        |          ^^^^^^^^^^^^^^^ - string
        |          ^^^^^^^^^^^^^^^ meta.tag.smarty
        |                         ^ - meta.tag.smarty
        |          ^^ punctuation.definition.begin.smarty
        |            ^^^^^^^^^^^ variable.other.smarty
        |                       ^^ punctuation.definition.end.smarty
        <table border="{#tableBorderSize#}" bgcolor="{#tableBgColor#}">
            <tr bgcolor="{#rowBgColor#}">
                <td>First</td>
                <td>Last</td>
                <td>Address</td>
            </tr>
        </table>
    </body>
</html>


{* https://smarty-php.github.io/smarty/stable/designers/language-basic-syntax/language-syntax-operators/#examples *}
{$foo + 1}

{$foo * $bar}

{$foo->bar - $bar[1] * $baz->foo->bar() -3 * 7}

{if ($foo + $bar.test % $baz * 134232 + 10 + $b + 10)}
    ...
{/if}

{$foo = $foo + $bar}



{% assign var="name" value="value" %}

{% capture name="name" assign="variable" %}
	<p class="test">Embedded HTML</p>
{% /capture %}

{% if isset($name) && not empty($name) and ($name == "string" || $name eq 'string') %}
|                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.group
|                                                                                  ^ - meta.group
|                                          ^ punctuation.group.begin
|                                                                                 ^ punctuation.group.end
	{%* True *%}
{% else %}
	{%* False *%}
{% /if %}

{% if 2 > 1 and 2 gt 1 and 1 < 2 and 1 lt 2 %}

{% /if %}

{% foreach from=$list item='item' %}
	{% $item|capitalize %}<br/>
{% /foreach %}

{% include file="file" key="value" %}

{% $var %}
{% $var->method($param, $elem) %}


{assign var="name" value="value"}

{capture name="name" assign="variable"}
	<p class="test {$some_var}">Embedded HTML</p>
{/capture}

{if isset($name) && not empty($name) and ($name == "string" || $name eq 'string')}
	{* True *}
{else}
	{* False *}
{/if}

{if 2 > 1 and 2 gt 1 and 1 < 2 and 1 lt 2}

{/if}

{foreach from=$list item='item'}
	{% $item|capitalize %}<br/>
{/foreach}

{include file="file" key="value"}

{$var}
{$var->method()}


{* smarty in js *}
<script>
   // the following braces are ignored by Smarty
   // since they are surrounded by whitespace
   function foobar {
    alert('foobar!');
   }
|  ^ - source.smarty
   // this one will need literal escapement
   {literal}
|  ^^^^^^^^^ meta.tag.smarty
    function bazzy {alert('foobar!');}
   {/literal}
|  ^^^^^^^^^^ meta.tag.smarty
|   ^ keyword.operator
|    ^ keyword.control
</script>

{* smarty in css *}
<style type="text/css">
   body {
|       ^ - source.smarty
      color: {$blue}
|            ^^^^^^^ meta.tag.smarty
|           ^ - meta.tag.smarty
|                   ^ - meta.tag.smarty
   }
</style>

<body style="color: {$blue}"></body>
|                   ^^^^^^^ meta.tag.smarty
|                  ^ - meta.tag.smarty
|                          ^ - meta.tag.smarty
